{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Project\\\\smfi\\\\Nodejs\\\\sh_project\\\\myreact2\\\\src\\\\Component\\\\Inventorty\\\\Sites\\\\Googlemap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, Polyline } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Googlemap(_ref) {\n  _s();\n\n  let {\n    totalLine\n  } = _ref;\n  const [bw400, setBw400] = useState([]);\n  const [bw300, setBw300] = useState([]);\n  const [bw200, setBw200] = useState([]);\n  const [bw100, setBw100] = useState([]);\n  console.log(totalLine);\n  const google = window.google;\n  const center = {\n    lat: 37.672481,\n    lng: 128.736743\n  };\n  const zoom = 14;\n  const mapSize = {\n    width: '1900px',\n    height: '700px',\n    margin: '20px'\n  };\n  const ifmarker = totalLine.map(value => {\n    if (value.wn_node) {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: value,\n        icon: {\n          url: \"battery25.png\",\n          scaledSize: new window.google.maps.Size(20, 40)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this);\n    } else if (value.p_node) {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: value,\n        icon: {\n          url: \"nodepop.png\",\n          scaledSize: new window.google.maps.Size(20, 40)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: value,\n        icon: {\n          url: \"3.png\",\n          scaledSize: new window.google.maps.Size(20, 40)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this);\n    }\n  });\n  const polyLine = totalLine.sort((a, b) => {\n    return a.line - b.line;\n  });\n  const options400 = {\n    strokeColor: 'yellowgreen',\n    strokeOpacity: 0.75,\n    strokeWeight: 8\n  };\n  const options300 = {\n    strokeColor: 'gold',\n    strokeOpacity: 0.75,\n    strokeWeight: 6\n  };\n  const options200 = {\n    strokeColor: 'gray',\n    strokeOpacity: 0.75,\n    strokeWeight: 4\n  };\n  const options100 = {\n    strokeColor: 'brown',\n    strokeOpacity: 0.75,\n    strokeWeight: 2\n  };\n  const bandWidth = polyLine.map((value, index, arr) => {\n    if (value.bw === 400) {\n      setBw400(value);\n    } else if (value.bw === 300) {\n      setBw300(value);\n    } else if (value.bw === 200) {\n      setBw200(value);\n    } else if (value.bw === 100) {\n      setBw100(value);\n    } else {\n      console.log('Err');\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"AIzaSyDevvetng60XedeOqk-qW9TF-XBNQsyxdE\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        center: center,\n        zoom: zoom,\n        mapContainerStyle: mapSize,\n        children: totalLine && ifmarker\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Googlemap, \"OEdW6eECxfXKSxIhdFp8MTmiUh4=\");\n\n_c = Googlemap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Googlemap\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Project/smfi/Nodejs/sh_project/myreact2/src/Component/Inventorty/Sites/Googlemap.js"],"names":["React","useState","GoogleMap","LoadScript","Marker","Polyline","Googlemap","totalLine","bw400","setBw400","bw300","setBw300","bw200","setBw200","bw100","setBw100","console","log","google","window","center","lat","lng","zoom","mapSize","width","height","margin","ifmarker","map","value","wn_node","url","scaledSize","maps","Size","p_node","polyLine","sort","a","b","line","options400","strokeColor","strokeOpacity","strokeWeight","options300","options200","options100","bandWidth","index","arr","bw"],"mappings":"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","sourcesContent":["import React,{ useState } from 'react';\r\nimport { GoogleMap, LoadScript, Marker, Polyline } from '@react-google-maps/api';\r\n\r\nexport default function Googlemap({totalLine}) {\r\n    const [bw400,setBw400] = useState([]);\r\n    const [bw300,setBw300] = useState([]);\r\n    const [bw200,setBw200] = useState([]);\r\n    const [bw100,setBw100] = useState([]);\r\n\r\n    console.log(totalLine);\r\n    const google = window.google;\r\n    const center = { \r\n        lat : 37.672481, \r\n        lng : 128.736743\r\n    };\r\n    const zoom = 14;\r\n    const mapSize = {\r\n        width : '1900px',\r\n        height : '700px',\r\n        margin : '20px'\r\n    };\r\n    \r\n    \r\n    const ifmarker = totalLine.map(value=>{\r\n        if(value.wn_node){\r\n            return (\r\n                <Marker \r\n                    position={value}\r\n                    icon={\r\n                        {\r\n                            url : \"battery25.png\",\r\n                            scaledSize: new window.google.maps.Size(20,40)\r\n                        }\r\n                    }\r\n                />\r\n            )\r\n        }else if(value.p_node){\r\n            return (\r\n                <Marker \r\n                    position={value}\r\n                    icon={\r\n                        {\r\n                            url : \"nodepop.png\",\r\n                            scaledSize: new window.google.maps.Size(20,40)\r\n                        }\r\n                    }\r\n            />\r\n            )\r\n        }else {\r\n            return (\r\n                <Marker \r\n                    position={value}\r\n                    icon={\r\n                        {\r\n                            url : \"3.png\",\r\n                            scaledSize: new window.google.maps.Size(20,40)\r\n                        }\r\n                    }\r\n                />\r\n            )\r\n        }\r\n    });\r\n\r\n    const polyLine = totalLine.sort((a,b)=>{\r\n        return a.line - b.line;\r\n    });\r\n    \r\n    const options400 = {\r\n        strokeColor:'yellowgreen',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 8,\r\n    };\r\n    const options300 = {\r\n        strokeColor:'gold',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 6,\r\n    };\r\n    const options200 = {\r\n        strokeColor:'gray',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 4,\r\n    };\r\n    const options100 = {\r\n        strokeColor:'brown',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 2,\r\n    };\r\n\r\n    const bandWidth = polyLine.map((value,index,arr)=>{\r\n        if(value.bw === 400){\r\n            setBw400(value);\r\n        }else if(value.bw === 300){\r\n            setBw300(value);\r\n        }else if(value.bw === 200){\r\n            setBw200(value);\r\n        }else if(value.bw === 100){\r\n            setBw100(value);\r\n        }else {\r\n            console.log('Err');\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <LoadScript googleMapsApiKey=\"AIzaSyDevvetng60XedeOqk-qW9TF-XBNQsyxdE\">\r\n                <GoogleMap center={center} zoom={zoom} mapContainerStyle={mapSize}>\r\n                    {totalLine && ifmarker}\r\n                </GoogleMap>\r\n            </LoadScript>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Project\\\\smfi\\\\Nodejs\\\\sh_project\\\\myreact2\\\\src\\\\Component\\\\Inventorty\\\\Sites\\\\Testmap.js\";\nimport React from 'react';\nimport { LoadScript, GoogleMap, Marker, InfoWindow, Polyline } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Testmap(_ref) {\n  let {\n    totalLine\n  } = _ref;\n  //console.log(totalLine);\n  const center = {\n    lat: 37.666169,\n    lng: 128.710769\n  };\n  const options300 = {\n    strokeColor: '#4a148c',\n    strokeOpacity: 0.75,\n    strokeWeight: 6\n  };\n  const options200 = {\n    strokeColor: '#1565c0',\n    strokeOpacity: 0.75,\n    strokeWeight: 4\n  };\n  const options100 = {\n    strokeColor: '#f57f17',\n    strokeOpacity: 0.75,\n    strokeWeight: 2\n  };\n  let i = 0;\n  const bw300 = totalLine.filter((value, index, arr) => {\n    //i++;\n    //console.log(i);\n    //console.log(value);\n    return value.line === i && value.bw === 300 ? {\n      lat: value.lat,\n      lng: value.lng\n    } : null;\n  }).map((value, index, arr) => {\n    //console.log(arr[index])\n    //console.log(arr[index+1])\n    return /*#__PURE__*/_jsxDEV(Polyline, {\n      path: [arr[index], arr[index + 1]],\n      options: options300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  }); //i = 0;\n\n  const bw200 = totalLine.filter((value, index, arr) => {\n    //i++;\n    //console.log(i);\n    //console.log(value);\n    return value.line === i && value.bw === 200 ? {\n      lat: value.lat,\n      lng: value.lng\n    } : null;\n  }).map((value, index, arr) => {\n    //console.log(arr[index])\n    //console.log(arr[index+1])\n    return /*#__PURE__*/_jsxDEV(Polyline, {\n      path: [arr[index], arr[index + 1]],\n      options: options200\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }); //i = 0;\n\n  const bw100 = totalLine.filter((value, index, arr) => {\n    //i++;\n    //console.log(i);\n    //console.log(value);\n    return value.line === i && value.bw === 100 ? {\n      lat: value.lat,\n      lng: value.lng\n    } : null;\n  }).map((value, index, arr) => {\n    //console.log(arr[index])\n    //console.log(arr[index+1])\n    return /*#__PURE__*/_jsxDEV(Polyline, {\n      path: [arr[index], arr[index + 1]],\n      options: options100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"AIzaSyDevvetng60XedeOqk-qW9TF-XBNQsyxdE\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: {\n          width: '1900px',\n          height: '700px',\n          margin: '20px'\n        },\n        center: center,\n        zoom: 13,\n        children: [totalLine.map(value => {\n          //console.log(value);\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 33\n          }, this);\n        }), bw300, bw200, bw100]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n_c = Testmap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Testmap\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Project/smfi/Nodejs/sh_project/myreact2/src/Component/Inventorty/Sites/Testmap.js"],"names":["React","LoadScript","GoogleMap","Marker","InfoWindow","Polyline","Testmap","totalLine","center","lat","lng","options300","strokeColor","strokeOpacity","strokeWeight","options200","options100","i","bw300","filter","value","index","arr","line","bw","map","bw200","bw100","width","height","margin"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { LoadScript, GoogleMap, Marker, InfoWindow, Polyline } from '@react-google-maps/api';\r\nexport default function Testmap({totalLine}) {\r\n    //console.log(totalLine);\r\n\r\n    const center = {\r\n        lat : 37.666169,\r\n        lng  : 128.710769\r\n    };\r\n    const options300 = {\r\n        strokeColor:'#4a148c',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 6,\r\n    };\r\n    const options200 = {\r\n        strokeColor:'#1565c0',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 4,\r\n    };\r\n    const options100 = {\r\n        strokeColor:'#f57f17',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 2,\r\n    };\r\n    let i = 0;\r\n\r\n    const bw300 = totalLine.filter((value,index,arr)=>{\r\n        //i++;\r\n        //console.log(i);\r\n        //console.log(value);\r\n        return value.line === i && value.bw === 300 ? {lat : value.lat , lng : value.lng} : null\r\n    }).map((value,index,arr)=>{\r\n        //console.log(arr[index])\r\n        //console.log(arr[index+1])\r\n        return (\r\n            <Polyline\r\n                path={[arr[index],arr[index+1]]}\r\n                options={options300}\r\n            />\r\n        );\r\n    })\r\n    //i = 0;\r\n    const bw200 = totalLine.filter((value,index,arr)=>{\r\n        //i++;\r\n        //console.log(i);\r\n        //console.log(value);\r\n        return value.line === i && value.bw === 200 ? {lat : value.lat , lng : value.lng} : null\r\n    }).map((value,index,arr)=>{\r\n        //console.log(arr[index])\r\n        //console.log(arr[index+1])\r\n        return (\r\n            <Polyline\r\n                path={[arr[index],arr[index+1]]}\r\n                options={options200}\r\n            />\r\n        )\r\n    })\r\n    //i = 0;\r\n    const bw100 = totalLine.filter((value,index,arr)=>{\r\n        //i++;\r\n        //console.log(i);\r\n        //console.log(value);\r\n        return value.line === i && value.bw === 100 ? {lat : value.lat , lng : value.lng} : null\r\n    }).map((value,index,arr)=>{\r\n        //console.log(arr[index])\r\n        //console.log(arr[index+1])\r\n        return (\r\n            <Polyline\r\n                path={[arr[index],arr[index+1]]}\r\n                options={options100}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <LoadScript googleMapsApiKey=\"AIzaSyDevvetng60XedeOqk-qW9TF-XBNQsyxdE\">\r\n                <GoogleMap\r\n                    mapContainerStyle={{\r\n                        width : '1900px',\r\n                        height : '700px',\r\n                        margin : '20px'\r\n                    }}\r\n                    center={center}\r\n                    zoom={13}\r\n                >\r\n                    {\r\n                        totalLine.map((value)=>{\r\n                            //console.log(value);\r\n                            return(\r\n                                <Marker \r\n                                    position={value}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {bw300}\r\n                    {bw200}\r\n                    {bw100}\r\n                    {/*\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 1 && value.bw === 300 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options300}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 1 && value.bw === 200 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options200}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 1 && value.bw === 100 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options100}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 2 && value.bw === 300 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options300}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 2 && value.bw === 200 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options200}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 2 && value.bw === 100 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options100}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 3 && value.bw === 300 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options300}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 3 && value.bw === 200 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options200}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 3 && value.bw === 100 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options100}\r\n                                />\r\n                            );\r\n                        })\r\n                    */}\r\n                </GoogleMap>\r\n            </LoadScript>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
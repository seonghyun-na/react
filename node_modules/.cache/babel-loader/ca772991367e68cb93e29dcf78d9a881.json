{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Project\\\\smfi\\\\Nodejs\\\\sh_project\\\\myreact2\\\\src\\\\Component\\\\Inventorty\\\\Sites\\\\Testmap.js\";\n\n/*global google*/\nimport React from 'react';\nimport { LoadScript, GoogleMap, Marker, InfoWindow, Polyline } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Testmap(props) {\n  //console.log(totalLine);\n  const center = {\n    lat: 37.666169,\n    lng: 128.710769\n  };\n  const options400 = {\n    strokeColor: 'red',\n    strokeOpacity: 0.75,\n    strokeWeight: 8\n  };\n  const options300 = {\n    strokeColor: '#4a148c',\n    strokeOpacity: 0.75,\n    strokeWeight: 6\n  };\n  const options200 = {\n    strokeColor: '#1565c0',\n    strokeOpacity: 0.75,\n    strokeWeight: 4\n  };\n  const options100 = {\n    strokeColor: '#f57f17',\n    strokeOpacity: 0.75,\n    strokeWeight: 2\n  };\n  const bw400 = props.totalLine.filter((value, index, arr) => {\n    return value.line === value.line && value.bw === 400 ? {\n      lat: value.lat,\n      lng: value.lng\n    } : null;\n  }).map((value, index, arr) => {\n    return /*#__PURE__*/_jsxDEV(Polyline, {\n      path: [arr[index], arr[index + 1]],\n      options: options400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  });\n  const bw300 = props.totalLine.filter((value, index, arr) => {\n    return value.line === value.line && value.bw === 300 ? {\n      lat: value.lat,\n      lng: value.lng\n    } : null;\n  }).map((value, index, arr) => {\n    return /*#__PURE__*/_jsxDEV(Polyline, {\n      path: [arr[index], arr[index + 1]],\n      options: options300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  });\n  const bw200 = props.totalLine.filter((value, index, arr) => {\n    return value.line === value.line && value.bw === 200 ? {\n      lat: value.lat,\n      lng: value.lng\n    } : null;\n  }).map((value, index, arr) => {\n    return /*#__PURE__*/_jsxDEV(Polyline, {\n      path: [arr[index], arr[index + 1]],\n      options: options200\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  });\n  const bw100 = props.totalLine.filter((value, index, arr) => {\n    return value.line === value.line && value.bw === 100 ? {\n      lat: value.lat,\n      lng: value.lng\n    } : null;\n  }).map((value, index, arr) => {\n    return /*#__PURE__*/_jsxDEV(Polyline, {\n      path: [arr[index], arr[index + 1]],\n      options: options100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"AIzaSyDevvetng60XedeOqk-qW9TF-XBNQsyxdE\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: {\n          width: '1900px',\n          height: '700px',\n          margin: '20px'\n        },\n        center: center,\n        zoom: 13,\n        children: [props.mapData_s.map(value => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: value,\n            icon: {\n              url: '2.png',\n              scaledSize: new google.maps.Size(20, 25)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this);\n        }), props.popData_s.map(value => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: value,\n            icon: {\n              url: '1.png',\n              scaledSize: new google.maps.Size(20, 25)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this);\n        }), props.trunk_s.map(value => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: value,\n            icon: {\n              url: '3.png',\n              scaledSize: new google.maps.Size(20, 25)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 33\n          }, this);\n        }), bw400, bw300, bw200, bw100]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_c = Testmap;\n{\n  /*\r\n     totalLine.filter((value,index,arr)=>{\r\n         return value.line === 1 && value.bw === 300 ? {lat : value.lat , lng : value.lng} : null\r\n     }).map((value,index,arr)=>{\r\n         return (\r\n             <Polyline\r\n                 path={[arr[index],arr[index+1]]}\r\n                 options={options300}\r\n             />\r\n         );\r\n     })\r\n  }\r\n  {\r\n     totalLine.filter((value,index,arr)=>{\r\n         return value.line === 1 && value.bw === 200 ? {lat : value.lat , lng : value.lng} : null\r\n     }).map((value,index,arr)=>{\r\n         return (\r\n             <Polyline\r\n                 path={[arr[index],arr[index+1]]}\r\n                 options={options200}\r\n             />\r\n         );\r\n     })\r\n  }\r\n  {\r\n     totalLine.filter((value,index,arr)=>{\r\n         return value.line === 1 && value.bw === 100 ? {lat : value.lat , lng : value.lng} : null\r\n     }).map((value,index,arr)=>{\r\n         return (\r\n             <Polyline\r\n                 path={[arr[index],arr[index+1]]}\r\n                 options={options100}\r\n             />\r\n         );\r\n     })\r\n  }\r\n   {\r\n     totalLine.filter((value,index,arr)=>{\r\n         return value.line === 2 && value.bw === 300 ? {lat : value.lat , lng : value.lng} : null\r\n     }).map((value,index,arr)=>{\r\n         return (\r\n             <Polyline\r\n                 path={[arr[index],arr[index+1]]}\r\n                 options={options300}\r\n             />\r\n         );\r\n     })\r\n  }\r\n  {\r\n     totalLine.filter((value,index,arr)=>{\r\n         return value.line === 2 && value.bw === 200 ? {lat : value.lat , lng : value.lng} : null\r\n     }).map((value,index,arr)=>{\r\n         return (\r\n             <Polyline\r\n                 path={[arr[index],arr[index+1]]}\r\n                 options={options200}\r\n             />\r\n         );\r\n     })\r\n  }\r\n  {\r\n     totalLine.filter((value,index,arr)=>{\r\n         return value.line === 2 && value.bw === 100 ? {lat : value.lat , lng : value.lng} : null\r\n     }).map((value,index,arr)=>{\r\n         return (\r\n             <Polyline\r\n                 path={[arr[index],arr[index+1]]}\r\n                 options={options100}\r\n             />\r\n         );\r\n     })\r\n  }\r\n   {\r\n     totalLine.filter((value,index,arr)=>{\r\n         return value.line === 3 && value.bw === 300 ? {lat : value.lat , lng : value.lng} : null\r\n     }).map((value,index,arr)=>{\r\n         return (\r\n             <Polyline\r\n                 path={[arr[index],arr[index+1]]}\r\n                 options={options300}\r\n             />\r\n         );\r\n     })\r\n  }\r\n  {\r\n     totalLine.filter((value,index,arr)=>{\r\n         return value.line === 3 && value.bw === 200 ? {lat : value.lat , lng : value.lng} : null\r\n     }).map((value,index,arr)=>{\r\n         return (\r\n             <Polyline\r\n                 path={[arr[index],arr[index+1]]}\r\n                 options={options200}\r\n             />\r\n         );\r\n     })\r\n  }\r\n  {\r\n     totalLine.filter((value,index,arr)=>{\r\n         return value.line === 3 && value.bw === 100 ? {lat : value.lat , lng : value.lng} : null\r\n     }).map((value,index,arr)=>{\r\n         return (\r\n             <Polyline\r\n                 path={[arr[index],arr[index+1]]}\r\n                 options={options100}\r\n             />\r\n         );\r\n     })\r\n  */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Testmap\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Project/smfi/Nodejs/sh_project/myreact2/src/Component/Inventorty/Sites/Testmap.js"],"names":["React","LoadScript","GoogleMap","Marker","InfoWindow","Polyline","Testmap","props","center","lat","lng","options400","strokeColor","strokeOpacity","strokeWeight","options300","options200","options100","bw400","totalLine","filter","value","index","arr","line","bw","map","bw300","bw200","bw100","width","height","margin","mapData_s","url","scaledSize","google","maps","Size","popData_s","trunk_s"],"mappings":"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","sourcesContent":["/*global google*/\r\nimport React from 'react';\r\nimport { LoadScript, GoogleMap, Marker, InfoWindow, Polyline } from '@react-google-maps/api';\r\nexport default function Testmap(props) {\r\n    //console.log(totalLine);\r\n\r\n    const center = {\r\n        lat : 37.666169,\r\n        lng  : 128.710769\r\n    };\r\n    const options400 = {\r\n        strokeColor:'red',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 8,\r\n    };\r\n    const options300 = {\r\n        strokeColor:'#4a148c',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 6,\r\n    };\r\n    const options200 = {\r\n        strokeColor:'#1565c0',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 4,\r\n    };\r\n    const options100 = {\r\n        strokeColor:'#f57f17',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 2,\r\n    };\r\n\r\n    const bw400 = props.totalLine.filter((value,index,arr)=>{\r\n        return value.line === value.line && value.bw === 400 ? {lat : value.lat , lng : value.lng} : null\r\n    }).map((value,index,arr)=>{\r\n        return (\r\n            <Polyline\r\n                path={[arr[index],arr[index+1]]}\r\n                options={options400}\r\n            />\r\n        );\r\n    })\r\n    const bw300 = props.totalLine.filter((value,index,arr)=>{\r\n        return value.line === value.line && value.bw === 300 ? {lat : value.lat , lng : value.lng} : null\r\n    }).map((value,index,arr)=>{\r\n        return (\r\n            <Polyline\r\n                path={[arr[index],arr[index+1]]}\r\n                options={options300}\r\n            />\r\n        );\r\n    })\r\n    const bw200 = props.totalLine.filter((value,index,arr)=>{\r\n        return value.line === value.line && value.bw === 200 ? {lat : value.lat , lng : value.lng} : null\r\n    }).map((value,index,arr)=>{\r\n        return (\r\n            <Polyline\r\n                path={[arr[index],arr[index+1]]}\r\n                options={options200}\r\n            />\r\n        )\r\n    })\r\n    const bw100 = props.totalLine.filter((value,index,arr)=>{\r\n        return value.line === value.line && value.bw === 100 ? {lat : value.lat , lng : value.lng} : null\r\n    }).map((value,index,arr)=>{\r\n        return (\r\n            <Polyline\r\n                path={[arr[index],arr[index+1]]}\r\n                options={options100}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <LoadScript googleMapsApiKey=\"AIzaSyDevvetng60XedeOqk-qW9TF-XBNQsyxdE\">\r\n                <GoogleMap\r\n                    mapContainerStyle={{\r\n                        width : '1900px',\r\n                        height : '700px',\r\n                        margin : '20px'\r\n                    }}\r\n                    center={center}\r\n                    zoom={13}\r\n                >\r\n                    {\r\n                        props.mapData_s.map((value)=>{\r\n                            return(\r\n                                <Marker \r\n                                    position={value}\r\n                                    icon={\r\n                                        {\r\n                                            url : '2.png',\r\n                                            scaledSize : new google.maps.Size(20,25),\r\n                                        }\r\n                                    }\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        props.popData_s.map(value=>{\r\n                            return (\r\n                                <Marker \r\n                                    position={value}\r\n                                    icon={\r\n                                        {\r\n                                            url : '1.png',\r\n                                            scaledSize : new google.maps.Size(20,25),\r\n                                        }\r\n                                    }\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        props.trunk_s.map(value=>{\r\n                            return (\r\n                                <Marker \r\n                                    position={value}\r\n                                    icon={\r\n                                        {\r\n                                            url : '3.png',\r\n                                            scaledSize : new google.maps.Size(20,25),\r\n                                        }\r\n                                    }\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n\r\n                    {bw400}\r\n                    \r\n                    {bw300}\r\n\r\n                    {bw200}\r\n\r\n                    {bw100}\r\n                </GoogleMap>\r\n            </LoadScript>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    {/*\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 1 && value.bw === 300 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options300}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 1 && value.bw === 200 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options200}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 1 && value.bw === 100 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options100}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 2 && value.bw === 300 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options300}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 2 && value.bw === 200 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options200}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 2 && value.bw === 100 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options100}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 3 && value.bw === 300 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options300}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 3 && value.bw === 200 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options200}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                    {\r\n                        totalLine.filter((value,index,arr)=>{\r\n                            return value.line === 3 && value.bw === 100 ? {lat : value.lat , lng : value.lng} : null\r\n                        }).map((value,index,arr)=>{\r\n                            return (\r\n                                <Polyline\r\n                                    path={[arr[index],arr[index+1]]}\r\n                                    options={options100}\r\n                                />\r\n                            );\r\n                        })\r\n                    */}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Project\\\\smfi\\\\Nodejs\\\\sh_project\\\\myreact2\\\\src\\\\Component\\\\Inventorty\\\\Sites\\\\Example.js\";\nimport React from 'react';\nimport { LoadScript, GoogleMap, Marker, InfoWindow, Polyline } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Example = props => {\n  const center = {\n    lat: 37.666169,\n    lng: 128.710769\n  };\n  const options400 = {\n    strokeColor: 'yellowgreen',\n    strokeOpacity: 0.75,\n    strokeWeight: 8\n  };\n  const options300 = {\n    strokeColor: 'gold',\n    strokeOpacity: 0.75,\n    strokeWeight: 6\n  };\n  const options200 = {\n    strokeColor: 'gray',\n    strokeOpacity: 0.75,\n    strokeWeight: 4\n  };\n  const options100 = {\n    strokeColor: 'brown',\n    strokeOpacity: 0.75,\n    strokeWeight: 2\n  };\n  /*const ex1 = props.totalLine.map((value,index,arr)=>{\r\n      if(value.line === 1){\r\n          \r\n          return(\r\n              <Polyline\r\n                  path={value}\r\n                  options={value.bw === 400 ? options400 : value.bw === 300 ? options300 : value.bw === 200 ? options200 : options100}\r\n              />\r\n          )\r\n      }else if(value.line === 2){\r\n          return(\r\n              <Polyline\r\n                  path={value}\r\n                  options={value.bw === 400 ? options400 : value.bw === 300 ? options300 : value.bw === 200 ? options200 : options100}\r\n              />\r\n          )\r\n      }else if(value.line === 3){\r\n          return(\r\n              <Polyline\r\n                  path={value}\r\n                  options={value.bw === 400 ? options400 : value.bw === 300 ? options300 : value.bw === 200 ? options200 : options100}\r\n              />\r\n          )\r\n      }else if(value.line === 4){\r\n          return(\r\n              <Polyline\r\n                  path={value}\r\n                  options={value.bw === 400 ? options400 : value.bw === 300 ? options300 : value.bw === 200 ? options200 : options100}\r\n              />\r\n          )\r\n      }else if(value.line === 5){\r\n          return(\r\n              <Polyline\r\n                  path={value}\r\n                  options={value.bw === 400 ? options400 : value.bw === 300 ? options300 : value.bw === 200 ? options200 : options100}\r\n              />\r\n          )\r\n      }\r\n  })*/\n\n  const ex2 = value => {\n    for (let i = 1; i < props.totalLine.length; i++) {\n      props.totalLine.map((value, index, arr) => {\n        console.log(value[index]);\n\n        if (value.line === i) {\n          return /*#__PURE__*/_jsxDEV(Polyline, {\n            path: [value, value[index + i]]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this);\n        }\n      });\n    }\n  };\n\n  ex2(props.totalLine);\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyDevvetng60XedeOqk-qW9TF-XBNQsyxdE\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: {\n        width: '1900px',\n        height: '700px',\n        margin: '20px'\n      },\n      center: center,\n      zoom: 13,\n      children: props.totalLine.map(value => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Marker, {\n            position: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Example;\nexport default Example;\n\nvar _c;\n\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/Project/smfi/Nodejs/sh_project/myreact2/src/Component/Inventorty/Sites/Example.js"],"names":["React","LoadScript","GoogleMap","Marker","InfoWindow","Polyline","Example","props","center","lat","lng","options400","strokeColor","strokeOpacity","strokeWeight","options300","options200","options100","ex2","value","i","totalLine","length","map","index","arr","console","log","line","width","height","margin"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,MAAhC,EAAwCC,UAAxC,EAAoDC,QAApD,QAAoE,wBAApE;;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACvB,QAAMC,MAAM,GAAG;AACXC,IAAAA,GAAG,EAAG,SADK;AAEXC,IAAAA,GAAG,EAAI;AAFI,GAAf;AAIA,QAAMC,UAAU,GAAG;AACfC,IAAAA,WAAW,EAAC,aADG;AAEfC,IAAAA,aAAa,EAAE,IAFA;AAGfC,IAAAA,YAAY,EAAE;AAHC,GAAnB;AAKA,QAAMC,UAAU,GAAG;AACfH,IAAAA,WAAW,EAAC,MADG;AAEfC,IAAAA,aAAa,EAAE,IAFA;AAGfC,IAAAA,YAAY,EAAE;AAHC,GAAnB;AAKA,QAAME,UAAU,GAAG;AACfJ,IAAAA,WAAW,EAAC,MADG;AAEfC,IAAAA,aAAa,EAAE,IAFA;AAGfC,IAAAA,YAAY,EAAE;AAHC,GAAnB;AAKA,QAAMG,UAAU,GAAG;AACfL,IAAAA,WAAW,EAAC,OADG;AAEfC,IAAAA,aAAa,EAAE,IAFA;AAGfC,IAAAA,YAAY,EAAE;AAHC,GAAnB;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAMI,GAAG,GAAIC,KAAD,IAAU;AAClB,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAEb,KAAK,CAACc,SAAN,CAAgBC,MAAhC,EAAwCF,CAAC,EAAzC,EAA4C;AACxCb,MAAAA,KAAK,CAACc,SAAN,CAAgBE,GAAhB,CAAoB,CAACJ,KAAD,EAAOK,KAAP,EAAaC,GAAb,KAAmB;AACnCC,QAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACK,KAAD,CAAjB;;AACA,YAAGL,KAAK,CAACS,IAAN,KAAeR,CAAlB,EAAoB;AAChB,8BACI,QAAC,QAAD;AACI,YAAA,IAAI,EAAE,CAACD,KAAD,EAAOA,KAAK,CAACK,KAAK,GAACJ,CAAP,CAAZ;AADV;AAAA;AAAA;AAAA;AAAA,kBADJ;AAMH;AACJ,OAVD;AAWH;AACJ,GAdD;;AAeAF,EAAAA,GAAG,CAACX,KAAK,CAACc,SAAP,CAAH;AAEA,sBACI,QAAC,UAAD;AAAY,IAAA,gBAAgB,EAAC,yCAA7B;AAAA,2BACI,QAAC,SAAD;AACI,MAAA,iBAAiB,EAAE;AACfQ,QAAAA,KAAK,EAAG,QADO;AAEfC,QAAAA,MAAM,EAAG,OAFM;AAGfC,QAAAA,MAAM,EAAG;AAHM,OADvB;AAMI,MAAA,MAAM,EAAEvB,MANZ;AAOI,MAAA,IAAI,EAAE,EAPV;AAAA,gBAUQD,KAAK,CAACc,SAAN,CAAgBE,GAAhB,CAAoBJ,KAAK,IAAE;AACvB,4BACI;AAAA,iCACI,QAAC,MAAD;AACI,YAAA,QAAQ,EAAEA;AADd;AAAA;AAAA;AAAA;AAAA;AADJ,yBADJ;AAOH,OARD;AAVR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CA5GD;;KAAMb,O;AA8GN,eAAeA,OAAf","sourcesContent":["import React from 'react';\r\nimport { LoadScript, GoogleMap, Marker, InfoWindow, Polyline } from '@react-google-maps/api';\r\n\r\nconst Example = (props) => {\r\n    const center = {\r\n        lat : 37.666169,\r\n        lng  : 128.710769\r\n    };\r\n    const options400 = {\r\n        strokeColor:'yellowgreen',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 8,\r\n    };\r\n    const options300 = {\r\n        strokeColor:'gold',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 6,\r\n    };\r\n    const options200 = {\r\n        strokeColor:'gray',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 4,\r\n    };\r\n    const options100 = {\r\n        strokeColor:'brown',\r\n        strokeOpacity: 0.75,\r\n        strokeWeight: 2,\r\n    };\r\n\r\n    /*const ex1 = props.totalLine.map((value,index,arr)=>{\r\n        if(value.line === 1){\r\n            \r\n            return(\r\n                <Polyline\r\n                    path={value}\r\n                    options={value.bw === 400 ? options400 : value.bw === 300 ? options300 : value.bw === 200 ? options200 : options100}\r\n                />\r\n            )\r\n        }else if(value.line === 2){\r\n            return(\r\n                <Polyline\r\n                    path={value}\r\n                    options={value.bw === 400 ? options400 : value.bw === 300 ? options300 : value.bw === 200 ? options200 : options100}\r\n                />\r\n            )\r\n        }else if(value.line === 3){\r\n            return(\r\n                <Polyline\r\n                    path={value}\r\n                    options={value.bw === 400 ? options400 : value.bw === 300 ? options300 : value.bw === 200 ? options200 : options100}\r\n                />\r\n            )\r\n        }else if(value.line === 4){\r\n            return(\r\n                <Polyline\r\n                    path={value}\r\n                    options={value.bw === 400 ? options400 : value.bw === 300 ? options300 : value.bw === 200 ? options200 : options100}\r\n                />\r\n            )\r\n        }else if(value.line === 5){\r\n            return(\r\n                <Polyline\r\n                    path={value}\r\n                    options={value.bw === 400 ? options400 : value.bw === 300 ? options300 : value.bw === 200 ? options200 : options100}\r\n                />\r\n            )\r\n        }\r\n    })*/\r\n\r\n    const ex2 = (value) =>{\r\n        for(let i=1; i< props.totalLine.length; i++){\r\n            props.totalLine.map((value,index,arr)=>{\r\n                console.log(value[index]);\r\n                if(value.line === i){\r\n                    return (\r\n                        <Polyline\r\n                            path={[value,value[index+i]]}\r\n                            \r\n                        />\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n    ex2(props.totalLine);\r\n\r\n    return(\r\n        <LoadScript googleMapsApiKey=\"AIzaSyDevvetng60XedeOqk-qW9TF-XBNQsyxdE\">\r\n            <GoogleMap\r\n                mapContainerStyle={{\r\n                    width : '1900px',\r\n                    height : '700px',\r\n                    margin : '20px'\r\n                }}\r\n                center={center}\r\n                zoom={13}\r\n            >\r\n                {\r\n                    props.totalLine.map(value=>{\r\n                        return(\r\n                            <>\r\n                                <Marker\r\n                                    position={value}\r\n                                />\r\n                            </>\r\n                        );\r\n                    })\r\n                }\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    );\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}